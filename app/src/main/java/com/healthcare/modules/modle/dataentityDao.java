package com.healthcare.modules.modle;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.healthcare.modules.modle.dataentity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DATAENTITY".
*/
public class dataentityDao extends AbstractDao<dataentity, Void> {

    public static final String TABLENAME = "DATAENTITY";

    /**
     * Properties of entity dataentity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property TimeStamp = new Property(0, Long.class, "timeStamp", false, "TIME_STAMP");
        public final static Property X = new Property(1, Float.class, "x", false, "X");
        public final static Property Y = new Property(2, Float.class, "y", false, "Y");
        public final static Property Z = new Property(3, Float.class, "z", false, "Z");
        public final static Property Type = new Property(4, Integer.class, "type", false, "TYPE");
        public final static Property Accuracy = new Property(5, Integer.class, "accuracy", false, "ACCURACY");
        public final static Property Tag = new Property(6, String.class, "tag", false, "TAG");
    };


    public dataentityDao(DaoConfig config) {
        super(config);
    }
    
    public dataentityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DATAENTITY\" (" + //
                "\"TIME_STAMP\" INTEGER," + // 0: timeStamp
                "\"X\" REAL," + // 1: x
                "\"Y\" REAL," + // 2: y
                "\"Z\" REAL," + // 3: z
                "\"TYPE\" INTEGER," + // 4: type
                "\"ACCURACY\" INTEGER," + // 5: accuracy
                "\"TAG\" TEXT);"); // 6: tag
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DATAENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, dataentity entity) {
        stmt.clearBindings();
 
        Long timeStamp = entity.getTimeStamp();
        if (timeStamp != null) {
            stmt.bindLong(1, timeStamp);
        }
 
        Float x = entity.getX();
        if (x != null) {
            stmt.bindDouble(2, x);
        }
 
        Float y = entity.getY();
        if (y != null) {
            stmt.bindDouble(3, y);
        }
 
        Float z = entity.getZ();
        if (z != null) {
            stmt.bindDouble(4, z);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(5, type);
        }
 
        Integer accuracy = entity.getAccuracy();
        if (accuracy != null) {
            stmt.bindLong(6, accuracy);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(7, tag);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public dataentity readEntity(Cursor cursor, int offset) {
        dataentity entity = new dataentity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // timeStamp
            cursor.isNull(offset + 1) ? null : cursor.getFloat(offset + 1), // x
            cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2), // y
            cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3), // z
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // type
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // accuracy
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // tag
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, dataentity entity, int offset) {
        entity.setTimeStamp(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setX(cursor.isNull(offset + 1) ? null : cursor.getFloat(offset + 1));
        entity.setY(cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2));
        entity.setZ(cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3));
        entity.setType(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setAccuracy(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setTag(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(dataentity entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(dataentity entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
