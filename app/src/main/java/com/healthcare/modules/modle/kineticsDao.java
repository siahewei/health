package com.healthcare.modules.modle;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.healthcare.modules.modle.kinetics;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "KINETICS".
*/
public class kineticsDao extends AbstractDao<kinetics, Long> {

    public static final String TABLENAME = "KINETICS";

    /**
     * Properties of entity kinetics.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Anglex = new Property(1, Float.class, "anglex", false, "ANGLEX");
        public final static Property Angley = new Property(2, Float.class, "angley", false, "ANGLEY");
        public final static Property Agnlez = new Property(3, Float.class, "agnlez", false, "AGNLEZ");
        public final static Property Accelx = new Property(4, Float.class, "accelx", false, "ACCELX");
        public final static Property Accely = new Property(5, Float.class, "accely", false, "ACCELY");
        public final static Property Accelz = new Property(6, Float.class, "accelz", false, "ACCELZ");
        public final static Property Gyrox = new Property(7, Float.class, "gyrox", false, "GYROX");
        public final static Property Gyroy = new Property(8, Float.class, "gyroy", false, "GYROY");
        public final static Property Gyroz = new Property(9, Float.class, "gyroz", false, "GYROZ");
    };


    public kineticsDao(DaoConfig config) {
        super(config);
    }
    
    public kineticsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"KINETICS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ANGLEX\" REAL," + // 1: anglex
                "\"ANGLEY\" REAL," + // 2: angley
                "\"AGNLEZ\" REAL," + // 3: agnlez
                "\"ACCELX\" REAL," + // 4: accelx
                "\"ACCELY\" REAL," + // 5: accely
                "\"ACCELZ\" REAL," + // 6: accelz
                "\"GYROX\" REAL," + // 7: gyrox
                "\"GYROY\" REAL," + // 8: gyroy
                "\"GYROZ\" REAL);"); // 9: gyroz
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"KINETICS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, kinetics entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Float anglex = entity.getAnglex();
        if (anglex != null) {
            stmt.bindDouble(2, anglex);
        }
 
        Float angley = entity.getAngley();
        if (angley != null) {
            stmt.bindDouble(3, angley);
        }
 
        Float agnlez = entity.getAgnlez();
        if (agnlez != null) {
            stmt.bindDouble(4, agnlez);
        }
 
        Float accelx = entity.getAccelx();
        if (accelx != null) {
            stmt.bindDouble(5, accelx);
        }
 
        Float accely = entity.getAccely();
        if (accely != null) {
            stmt.bindDouble(6, accely);
        }
 
        Float accelz = entity.getAccelz();
        if (accelz != null) {
            stmt.bindDouble(7, accelz);
        }
 
        Float gyrox = entity.getGyrox();
        if (gyrox != null) {
            stmt.bindDouble(8, gyrox);
        }
 
        Float gyroy = entity.getGyroy();
        if (gyroy != null) {
            stmt.bindDouble(9, gyroy);
        }
 
        Float gyroz = entity.getGyroz();
        if (gyroz != null) {
            stmt.bindDouble(10, gyroz);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public kinetics readEntity(Cursor cursor, int offset) {
        kinetics entity = new kinetics( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getFloat(offset + 1), // anglex
            cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2), // angley
            cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3), // agnlez
            cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4), // accelx
            cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5), // accely
            cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6), // accelz
            cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7), // gyrox
            cursor.isNull(offset + 8) ? null : cursor.getFloat(offset + 8), // gyroy
            cursor.isNull(offset + 9) ? null : cursor.getFloat(offset + 9) // gyroz
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, kinetics entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAnglex(cursor.isNull(offset + 1) ? null : cursor.getFloat(offset + 1));
        entity.setAngley(cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2));
        entity.setAgnlez(cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3));
        entity.setAccelx(cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4));
        entity.setAccely(cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5));
        entity.setAccelz(cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6));
        entity.setGyrox(cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7));
        entity.setGyroy(cursor.isNull(offset + 8) ? null : cursor.getFloat(offset + 8));
        entity.setGyroz(cursor.isNull(offset + 9) ? null : cursor.getFloat(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(kinetics entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(kinetics entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
